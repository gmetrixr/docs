"use strict";(self.webpackChunkgmetri_docs=self.webpackChunkgmetri_docs||[]).push([[4064],{9613:function(e,n,t){t.d(n,{Zo:function(){return d},kt:function(){return f}});var r=t(9496);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=r.createContext({}),p=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},d=function(e){var n=p(e.components);return r.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},c=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),c=p(t),f=i,g=c["".concat(s,".").concat(f)]||c[f]||u[f]||a;return t?r.createElement(g,o(o({ref:n},d),{},{components:t})):r.createElement(g,o({ref:n},d))}));function f(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=c;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var p=2;p<a;p++)o[p]=t[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}c.displayName="MDXCreateElement"},6993:function(e,n,t){t.r(n),t.d(n,{assets:function(){return d},contentTitle:function(){return s},default:function(){return f},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return u}});var r=t(7813),i=t(7044),a=(t(9496),t(9613)),o=["components"],l={},s="Uploading Files",p={unversionedId:"plugins/examples/index",id:"plugins/examples/index",title:"Uploading Files",description:"Call pre-signed upload endpoint to get a pre-signed url for file and and it's thumbnail file.",source:"@site/docs/07_plugins/05_examples/index.md",sourceDirName:"07_plugins/05_examples",slug:"/plugins/examples/",permalink:"/docs/plugins/examples/",editUrl:"https://github.com/gmetrixr/docs/edit/main/gmetri-docs/docs/07_plugins/05_examples/index.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"File Manager",permalink:"/docs/plugins/rest_api/filemanager"}},d={},u=[{value:"Call pre-signed upload endpoint to get a pre-signed url for file and and it&#39;s thumbnail file.",id:"call-pre-signed-upload-endpoint-to-get-a-pre-signed-url-for-file-and-and-its-thumbnail-file",level:3},{value:"write selected file to pre-signed url",id:"write-selected-file-to-pre-signed-url",level:3},{value:"call create file api endpoint to add new file into database.",id:"call-create-file-api-endpoint-to-add-new-file-into-database",level:3}],c={toc:u};function f(e){var n=e.components,t=(0,i.Z)(e,o);return(0,a.kt)("wrapper",(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"uploading-files"},"Uploading Files"),(0,a.kt)("h3",{id:"call-pre-signed-upload-endpoint-to-get-a-pre-signed-url-for-file-and-and-its-thumbnail-file"},"Call pre-signed upload endpoint to get a pre-signed url for file and and it's thumbnail file."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'async function getPresignedUrl({ file_paths, folderId, name }: { rootName: string; folderId: number; name: string }) {\n  const response = await fetch(`/plugin/presignUpload`, {\n    method: "POST",\n    headers: {\n      "Content-Type": "application/json",\n      Authorization: `Token ${userApiToken}`,\n    },\n    body: JSON.stringify({ rootName, folderId, name }),\n  });\n  return await response.json();\n}\n')),(0,a.kt)("h3",{id:"write-selected-file-to-pre-signed-url"},"write selected file to pre-signed url"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'async function writeFileToPresignedUrl({ presignedUrl, file, name }: { presignedUrl: string; file: File }) {\n  const response = await fetch(presignedUrl, {\n    method: "PUT",\n    headers: {\n      "Content-Type": "image/*"\n    },\n    body: file\n  });\n  return await response.json();\n}\n')),(0,a.kt)("h3",{id:"call-create-file-api-endpoint-to-add-new-file-into-database"},"call create file api endpoint to add new file into database."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'async function createFile({ rootName, folderId, uploadMeta }: {\n  rootName: string;\n  folderId: number;\n  uploadMeta: {\n    name: string;\n    type: string;\n    filePaths: {\n      o: string;\n      t?: string;\n      r?: string;\n    };\n    uuid: string;\n    size: number;\n    relativePath?: string;\n  };\n}) {\n  const response = await fetch(`/plugin/createFile`, {\n    method: "POST",\n    headers: {\n      "Content-Type": "application/json",\n      Authorization: `Token ${userApiToken}`,\n    },\n    body: JSON.stringify({ rootName, folderId, name }),\n  });\n  return await response.json();\n}\n')))}f.isMDXComponent=!0}}]);